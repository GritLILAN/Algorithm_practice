(1)特别暴力的翻转后比较
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root){
        if(root == nullptr) return nullptr;
        TreeNode* left = invertTree(root->left);
        TreeNode* right = invertTree(root->right);
        root->left = right;
        root->right = left;
        return root;
    }
    void bfs(TreeNode* root, vector<int>& v){
        queue<TreeNode*> q;
        q.push(root);
        while(q.size()){
            auto u = q.front();
            q.pop();
            if(u == nullptr){
                v.push_back(-101);
                continue;
            }
            v.push_back(u->val);
            q.push(u->left);
            q.push(u->right);
        }
    }
    bool isSymmetric(TreeNode* root) {
        vector<int> a;
        bfs(root, a);
        vector<int> b;
        root = invertTree(root);
        bfs(root, b);
        if(a == b) return true;
        return false;
    }
};

（2）左右指针遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool check(TreeNode* p, TreeNode* q){
        if(!p && !q) return true;
        if(!p || !q) return false;
        return (p->val == q->val) && check(p->left, q->right) && check(p->right, q->left);
    }
    bool isSymmetric(TreeNode* root) {
        if(root == nullptr) return true;
        return check(root->left, root->right);
    }
};