/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> q;
        unordered_map<TreeNode*, int> depth;
        depth[root] = 0;
        if(root == nullptr) return res;
        q.push(root);
        while(q.size()){
            auto u = q.front();
            q.pop();
            if(depth[u] + 1 > res.size()){
                res.push_back(vector<int>());
            }
            res[depth[u]].push_back(u->val);
            if(u->left != nullptr){
                depth[u->left] = depth[u] + 1;
                q.push(u->left);
            }
            if(u->right != nullptr){
                depth[u->right] = depth[u] + 1;
                q.push(u->right);
            }
        }
        return res;
    }
};